import streamlit as st
import pandas as pd
import os

@st.cache_data
def charger_parcelles():
    """Charge les donn√©es des parcelles depuis le fichier Excel"""
    
    # Chemins possibles √©tendus pour diff√©rents environnements
    chemins_possibles = [
        "data/parcelles.xlsx",
        "parcelles.xlsx",
        "./data/parcelles.xlsx",
        os.path.join(os.path.dirname(__file__), "data", "parcelles.xlsx"),
        os.path.join(os.path.dirname(__file__), "parcelles.xlsx"),
        os.path.abspath("data/parcelles.xlsx"),
        os.path.abspath("parcelles.xlsx")
    ]
    
    # Recherche automatique dans tous les sous-dossiers
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.lower() == 'parcelles.xlsx':
                chemins_possibles.append(os.path.join(root, file))
    
    # √âliminer les doublons
    chemins_possibles = list(set(chemins_possibles))
    
    for chemin in chemins_possibles:
        try:
            if os.path.exists(chemin):
                df = pd.read_excel(chemin, engine="openpyxl")
                df.columns = df.columns.str.lower()
                df["nicad"] = df["nicad"].astype(str).str.strip().str.lower() == "oui"
                df["nicad"] = df["nicad"].map({True: "Avec NICAD", False: "Sans NICAD"})
                
                if "deliberee" in df.columns:
                    df["deliberee"] = df["deliberee"].astype(str).str.strip().str.lower() == "oui"
                    df["statut_deliberation"] = df["deliberee"].map({True: "D√©lib√©r√©e", False: "Non d√©lib√©r√©e"})
                else:
                    df["statut_deliberation"] = "Non d√©lib√©r√©e"
                    
                df["superficie"] = pd.to_numeric(df["superficie"], errors="coerce")
                df["village"] = df["village"].fillna("Non sp√©cifi√©").replace("", "Non sp√©cifi√©")
                df["commune"] = df["commune"].fillna("Non sp√©cifi√©").replace("", "Non sp√©cifi√©")
                
                st.success(f"‚úÖ Donn√©es parcelles charg√©es depuis: {chemin}")
                return df
                
        except Exception as e:
            continue
    
    # Afficher les chemins test√©s pour d√©bogage
    st.error("‚ùå Fichier 'parcelles.xlsx' introuvable")
    st.info("üìÅ Emplacements recherch√©s:")
    for chemin in chemins_possibles[:5]:  # Afficher seulement les 5 premiers
        st.write(f"- {chemin}")
    
    # Si aucun fichier n'est trouv√©, retourner un DataFrame vide
    return pd.DataFrame(columns=[
        'commune', 'village', 'nicad', 'statut_deliberation', 'superficie', 'type_usag'
    ])

# Fonction utilitaire pour diagnostiquer l'environnement
def diagnostiquer_environnement():
    """Fonction utilitaire pour diagnostiquer l'environnement d'ex√©cution"""
    st.subheader("üîç Diagnostic de l'environnement")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Informations syst√®me:**")
        st.write(f"- R√©pertoire de travail: `{os.getcwd()}`")
        st.write(f"- Fichier actuel: `{__file__}`")
        st.write(f"- R√©pertoire du script: `{os.path.dirname(__file__)}`")
    
    with col2:
        st.write("**Contenu des dossiers:**")
        st.write(f"- Racine: `{os.listdir('.')}`")
        if os.path.exists('data'):
            st.write(f"- Dossier data: `{os.listdir('data')}`")
        else:
            st.write("- ‚ùå Dossier 'data' introuvable")
    
    # Rechercher tous les fichiers Excel
    st.write("**Fichiers Excel d√©tect√©s:**")
    fichiers_excel = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith(('.xlsx', '.xls')):
                fichiers_excel.append(os.path.join(root, file))
    
    if fichiers_excel:
        for fichier in fichiers_excel:
            st.write(f"- ‚úÖ {fichier}")
    else:
        st.write("- ‚ùå Aucun fichier Excel trouv√©")
