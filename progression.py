import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


def afficher_etat_avancement(df_etapes=None):
    """
    Fonction principale pour afficher l'onglet √âtat d'avancement des communes

    Args:
        df_etapes: DataFrame optionnel contenant les donn√©es d'avancement.
                  Si None, les donn√©es seront charg√©es depuis le fichier Excel.
    """
    st.header("üìÖ √âtat d'avancement des communes")

    # Chargement des donn√©es si non fournies
    if df_etapes is None:
        df_etapes = charger_donnees_etapes()
    else:
        # S'assurer que les calculs de progr√®s sont effectu√©s sur les donn√©es fournies
        if "Progr√®s (%)" not in df_etapes.columns:
            df_etapes["Progr√®s (%)"] = df_etapes["Progr√®s des √©tapes"].apply(evaluer_progres)

    # Interface de filtrage
    region_sel, commune_sel, csig_sel, df_etapes_filtre = filtrer_donnees(df_etapes)

    # Afficher la l√©gende
    afficher_legende()

    # Afficher le contenu appropri√© selon les filtres
    if region_sel == "Toutes" and commune_sel == "Toutes" and csig_sel == "Tous":
        afficher_vue_globale(df_etapes)
    elif region_sel != "Toutes" and commune_sel == "Toutes" and csig_sel == "Tous":
        afficher_vue_region(df_etapes_filtre, region_sel)
    else:
        afficher_details_communes(df_etapes_filtre)


@st.cache_data
def charger_donnees_etapes():
    """
    Charge et pr√©pare les donn√©es d'√©tat d'avancement
    """
    try:
        df_etapes = pd.read_excel("data/Etat des op√©rations Boundou-Mai 2025.xlsx", engine="openpyxl")
        df_etapes.fillna("", inplace=True)

        # Calcul du progr√®s en pourcentage
        df_etapes["Progr√®s (%)"] = df_etapes["Progr√®s des √©tapes"].apply(evaluer_progres)

        return df_etapes
    except FileNotFoundError:
        st.error("Le fichier 'data/Etat des op√©rations Boundou-Mai 2025.xlsx' n'a pas √©t√© trouv√©.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es : {str(e)}")
        return pd.DataFrame()


def evaluer_progres(etapes):
    """
    √âvalue le progr√®s d'une commune bas√© sur les √©tapes d√©crites
    """
    # Handle None, NaN, or non-string values
    if etapes is None or pd.isna(etapes) or not isinstance(etapes, str):
        return 0.0
    
    # Handle empty string
    if etapes.strip() == "":
        return 0.0
    
    # Consid√®re une √©tape d√©but√©e m√™me si elle n'est pas encore compl√©t√©e
    total = 4  # 4 √©tapes cl√©s
    score = 0
    
    try:
        etapes_list = [e.strip().lower() for e in etapes.split("\n") if e.strip() != ""]
        
        for etape in etapes_list:
            if "compl√©t" in etape or "affichage public (compl√©t√©s)" in etape:
                score += 1
            elif "en cours" in etape or "d√©but√©" in etape or "commenc√©" in etape:
                score += 0.5  # Attribuer un demi-point pour les √©tapes en cours
        
        return (score / total) * 100
    
    except Exception as e:
        # Log the error for debugging (optional)
        print(f"Error processing etapes: {etapes}, Error: {e}")
        return 0.0


def filtrer_donnees(df_etapes):
    """
    Filtre les donn√©es selon les s√©lections de l'utilisateur
    """
    if df_etapes.empty:
        return "Toutes", "Toutes", "Tous", df_etapes
    
    # V√©rifier si les colonnes existent
    if "R√©gion" not in df_etapes.columns:
        st.error("La colonne 'R√©gion' n'existe pas dans les donn√©es.")
        return "Toutes", "Toutes", "Tous", df_etapes
    
    regions = ["Toutes"] + sorted(df_etapes["R√©gion"].dropna().unique())
    region_sel = st.selectbox("üåç Choisir une r√©gion :", regions)
    df_etapes_filtre = df_etapes if region_sel == "Toutes" else df_etapes[df_etapes["R√©gion"] == region_sel]

    if "Commune" not in df_etapes.columns:
        st.error("La colonne 'Commune' n'existe pas dans les donn√©es.")
        return region_sel, "Toutes", "Tous", df_etapes_filtre
    
    commune_sel = st.selectbox("üèòÔ∏è Choisir une commune :",
                               ["Toutes"] + sorted(df_etapes_filtre["Commune"].unique()))
    df_etapes_filtre = df_etapes_filtre if commune_sel == "Toutes" else df_etapes_filtre[
        df_etapes_filtre["Commune"] == commune_sel]

    if "CSIG" not in df_etapes.columns:
        st.error("La colonne 'CSIG' n'existe pas dans les donn√©es.")
        return region_sel, commune_sel, "Tous", df_etapes_filtre
    
    csig_sel = st.selectbox("üìå Choisir un CSIG :",
                            ["Tous"] + sorted(df_etapes_filtre["CSIG"].unique()))
    df_etapes_filtre = df_etapes_filtre if csig_sel == "Tous" else df_etapes_filtre[
        df_etapes_filtre["CSIG"] == csig_sel]

    return region_sel, commune_sel, csig_sel, df_etapes_filtre


def afficher_legende():
    """
    Affiche la l√©gende des indicateurs d'avancement
    """
    st.write("""
    ## L√©gende des indicateurs d'avancement:
    """)

    col_leg1, col_leg2, col_leg3, col_leg4 = st.columns(4)
    with col_leg1:
        st.markdown("üî¥ **0-25%** : Non commenc√©")
    with col_leg2:
        st.markdown("üü† **25-50%** : En cours")
    with col_leg3:
        st.markdown("üü° **50-75%** : En cours avanc√©")
    with col_leg4:
        st.markdown("üü¢ **75-100%** : Pr√®s de la fin")

    st.markdown("---")


def afficher_vue_globale(df_etapes):
    """
    Affiche la vue globale de l'avancement du projet
    """
    st.subheader("üìä Vue globale de l'avancement du projet")

    if df_etapes.empty:
        st.warning("Aucune donn√©e disponible pour afficher la vue globale.")
        return

    # Calculer le nombre de communes d√©but√©es
    communes_debutees = df_etapes[df_etapes["Progr√®s (%)"] > 0]
    pourcentage_debutees = (len(communes_debutees) / len(df_etapes)) * 100 if len(df_etapes) > 0 else 0

    # Statistiques globales
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Nombre total de communes", len(df_etapes))
    with col2:
        st.metric("Communes ayant d√©but√©", len(communes_debutees))
    with col3:
        st.metric("Pourcentage de d√©marrage", f"{pourcentage_debutees:.1f}%")

    # Pour diagnostic: Afficher les d√©tails des communes d√©but√©es
    if len(communes_debutees) > 0:
        with st.expander("D√©tails des communes d√©but√©es (diagnostic)", expanded=False):
            st.dataframe(communes_debutees[["Commune", "Progr√®s (%)", "Progr√®s des √©tapes"]],
                         use_container_width=True)

    # Graphique d'avancement par r√©gion
    afficher_avancement_regions(df_etapes)

    # R√©sum√© des communes par √©tat d'avancement
    afficher_resume_etat_avancement(df_etapes)


def afficher_avancement_regions(df_etapes):
    """
    Affiche le graphique d'avancement moyen par r√©gion
    """
    st.subheader("üìà Avancement moyen par r√©gion")

    if df_etapes.empty or "R√©gion" not in df_etapes.columns:
        st.warning("Pas de donn√©es disponibles pour afficher l'avancement par r√©gion.")
        return

    # Calculer la moyenne de progression par r√©gion
    region_progress = df_etapes.groupby("R√©gion")["Progr√®s (%)"].mean().reset_index()

    if region_progress.empty:
        st.warning("Aucune donn√©e de progression par r√©gion disponible.")
        return

    # Cr√©er un graphique √† barres pour les r√©gions
    fig_regions_bar = px.bar(
        region_progress,
        x="R√©gion",
        y="Progr√®s (%)",
        title="Progression moyenne par r√©gion",
        color="Progr√®s (%)",
        color_continuous_scale=["red", "orange", "gold", "green"],
        range_color=[0, 100]
    )

    fig_regions_bar.update_layout(
        height=400,
        xaxis_title="R√©gion",
        yaxis_title="Progr√®s moyen (%)",
        yaxis=dict(range=[0, 100])
    )

    st.plotly_chart(fig_regions_bar, use_container_width=True, key="regions_bar_chart")


def afficher_resume_etat_avancement(df_etapes):
    """
    Affiche le r√©sum√© des communes par √©tat d'avancement
    """
    st.subheader("üîç R√©sum√© des communes par √©tat d'avancement")

    if df_etapes.empty:
        st.warning("Aucune donn√©e disponible pour le r√©sum√© d'√©tat d'avancement.")
        return

    # Cat√©goriser les communes par leur √©tat d'avancement
    df_etapes["Cat√©gorie"] = pd.cut(
        df_etapes["Progr√®s (%)"],
        bins=[0, 0.1, 25, 50, 75, 100],
        labels=["Non d√©but√©es", "D√©but√©es (<25%)", "En cours (25-50%)",
                "Avanc√©es (50-75%)", "Presque termin√©es (>75%)"]
    )

    resume = df_etapes["Cat√©gorie"].value_counts().reset_index()
    resume.columns = ["√âtat d'avancement", "Nombre de communes"]

    if resume.empty:
        st.warning("Aucune donn√©e de cat√©gorisation disponible.")
        return

    fig_resume = px.pie(
        resume,
        values="Nombre de communes",
        names="√âtat d'avancement",
        title="R√©partition des communes par √©tat d'avancement",
        color="√âtat d'avancement",
        color_discrete_map={
            "Non d√©but√©es": "lightgray",
            "D√©but√©es (<25%)": "red",
            "En cours (25-50%)": "orange",
            "Avanc√©es (50-75%)": "gold",
            "Presque termin√©es (>75%)": "green"
        }
    )

    st.plotly_chart(fig_resume, use_container_width=True, key="resume_pie_chart")


def afficher_vue_region(df_etapes_filtre, region_sel):
    """
    Affiche la vue d'ensemble pour une r√©gion sp√©cifique
    """
    st.subheader(f"üìä Vue d'ensemble pour la r√©gion: {region_sel}")

    if df_etapes_filtre.empty:
        st.warning(f"Aucune donn√©e disponible pour la r√©gion {region_sel}.")
        return

    # Statistiques pour la r√©gion
    communes_region = len(df_etapes_filtre)
    communes_debutees_region = len(df_etapes_filtre[df_etapes_filtre["Progr√®s (%)"] > 0])
    progres_moyen_region = df_etapes_filtre["Progr√®s (%)"].mean()

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Communes dans la r√©gion", communes_region)
    with col2:
        st.metric("Communes ayant d√©but√©", communes_debutees_region)
    with col3:
        st.metric("Progr√®s moyen", f"{progres_moyen_region:.1f}%")

    # Tableau r√©capitulatif des communes de la r√©gion
    afficher_tableau_communes_region(df_etapes_filtre, region_sel)


def afficher_tableau_communes_region(df_etapes_filtre, region_sel):
    """
    Affiche le tableau r√©capitulatif des communes d'une r√©gion
    """
    st.subheader(f"üèòÔ∏è R√©sum√© des communes de {region_sel}")

    if df_etapes_filtre.empty:
        st.warning(f"Aucune commune trouv√©e pour la r√©gion {region_sel}.")
        return

    # Cr√©er un tableau synth√©tique des communes
    colonnes_necessaires = ["Commune", "CSIG", "Progr√®s (%)"]
    if "Date D√©but" in df_etapes_filtre.columns:
        colonnes_necessaires.append("Date D√©but")
    
    resume_communes = df_etapes_filtre[colonnes_necessaires].copy()

    # Ajouter une colonne pour l'indicateur visuel
    resume_communes["√âtat"] = resume_communes["Progr√®s (%)"].apply(get_progress_indicator)

    # Trier par progr√®s d√©croissant
    resume_communes = resume_communes.sort_values(by="Progr√®s (%)", ascending=False)

    st.dataframe(resume_communes, use_container_width=True)

    # Graphique √† barres pour visualiser l'avancement des communes
    fig_communes = px.bar(
        resume_communes.sort_values(by="Progr√®s (%)", ascending=True),
        y="Commune",
        x="Progr√®s (%)",
        orientation="h",
        color="Progr√®s (%)",
        color_continuous_scale=["red", "orange", "gold", "green"],
        title=f"Avancement des communes de {region_sel}",
        range_color=[0, 100]
    )

    fig_communes.update_layout(
        height=max(400, len(resume_communes) * 30),  # Adapter la hauteur au nombre de communes
        xaxis=dict(range=[0, 100])
    )

    st.plotly_chart(fig_communes, use_container_width=True, key=f"communes_bar_{region_sel}")


def get_progress_indicator(progress):
    """
    Retourne l'indicateur visuel selon le niveau de progr√®s
    """
    if progress < 0.1:
        return "‚ö™ Non d√©but√©"
    elif progress < 25:
        return "üî¥ D√©but√©"
    elif progress < 50:
        return "üü† En cours"
    elif progress < 75:
        return "üü° Avanc√©"
    else:
        return "üü¢ Pr√®s de la fin"


def afficher_details_communes(df_etapes_filtre):
    """
    Affiche les d√©tails pour chaque commune filtr√©e
    """
    # Si aucune commune trouv√©e apr√®s filtrage
    if len(df_etapes_filtre) == 0:
        st.warning("Aucune commune ne correspond aux crit√®res de filtrage s√©lectionn√©s.")
        return

    # Parcourir et afficher les donn√©es de chaque commune filtr√©e
    for idx, row in df_etapes_filtre.iterrows():
        progress = row["Progr√®s (%)"]

        # D√©termination des couleurs selon le niveau d'avancement
        color, steps, threshold_color = determiner_parametres_jauge(progress)

        st.subheader(f"Avancement pour {row['Commune']} - CSIG : {row['CSIG']}")

        # Cr√©er deux colonnes pour afficher la jauge et les informations
        col1, col2 = st.columns([1, 2])

        with col1:
            # Utiliser l'indice de la ligne comme partie de la cl√© unique
            afficher_jauge_progres(progress, color, steps, f"gauge_{row['Commune']}_{idx}")

        with col2:
            afficher_infos_commune(row)

        # Ligne de s√©paration entre les communes
        st.markdown("---")


def determiner_parametres_jauge(progress):
    """
    D√©termine les param√®tres de couleur pour la jauge de progr√®s
    """
    if progress < 25:
        color = "red"
        steps = [{"range": [0, 25], "color": "lightgray"}]
        threshold_color = "red"
    elif progress < 50:
        color = "orange"
        steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "lightgray"}]
        threshold_color = "orange"
    elif progress < 75:
        color = "gold"
        steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "orange"},
                 {"range": [50, 75], "color": "lightgray"}]
        threshold_color = "gold"
    else:
        color = "green"
        steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "orange"},
                 {"range": [50, 75], "color": "gold"}, {"range": [75, 100], "color": "lightgray"}]
        threshold_color = "green"

    return color, steps, threshold_color


def afficher_jauge_progres(progress, color, steps, key_suffix):
    """
    Affiche une jauge de progr√®s pour une commune
    
    Args:
        progress: Valeur du progr√®s (pourcentage)
        color: Couleur de la jauge bas√©e sur le niveau d'avancement
        steps: √âtapes de couleur pour la jauge
        key_suffix: Suffixe unique pour la cl√© du graphique
    """
    # Cr√©ation d'une jauge (gauge) stylis√©e
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=progress,
        domain={"x": [0, 1], "y": [0, 1]},
        title={"text": f"Progr√®s: {progress:.1f}%"},
        gauge={
            "axis": {"range": [0, 100], "tickwidth": 1, "tickcolor": "darkblue"},
            "bar": {"color": color},
            "bgcolor": "white",
            "borderwidth": 2,
            "bordercolor": "gray",
            "steps": steps,
            "threshold": {
                "line": {"color": "black", "width": 4},
                "thickness": 0.75,
                "value": progress
            }
        }
    ))

    # Configuration du layout pour une meilleure visualisation
    fig.update_layout(
        height=300,
        margin=dict(l=10, r=10, t=50, b=10),
        paper_bgcolor="rgba(0,0,0,0)",
        font={"color": "darkblue", "family": "Arial"}
    )

    # Utiliser une cl√© unique pour chaque graphique
    st.plotly_chart(fig, use_container_width=True, key=key_suffix)


def afficher_infos_commune(row):
    """
    Affiche les informations d√©taill√©es d'une commune
    """
    # Affichage des informations de la commune
    start_date = row.get("Date D√©but", "Non sp√©cifi√©e")
    expected_end_date = row.get("Date de pr√©vision de compl√©ter les inventaires fonciers", "Non sp√©cifi√©e")

    st.write(f"üìÖ **Date de d√©but des op√©rations** : {start_date}")
    st.write(f"üìÖ **Date de fin pr√©vue** : {expected_end_date}")

    # Affichage des √©tapes d'avancement sous forme de tableau
    etapes_raw = row.get("Progr√®s des √©tapes", "")
    
    # Gestion s√©curis√©e des √©tapes
    if etapes_raw is None or pd.isna(etapes_raw) or not isinstance(etapes_raw, str):
        etapes = ["Non sp√©cifi√©"] * 4
    else:
        etapes = etapes_raw.split("\n")

    st.write("#### üîÑ Progression des √©tapes:")

    # Cr√©ation d'un tableau d'avancement avec des indicateurs color√©s
    etapes_data = [
        ["1. Lev√©s topo et enqu√™tes", etapes[0] if len(etapes) > 0 else "Non sp√©cifi√©"],
        ["2. Affichage public", etapes[1] if len(etapes) > 1 else "Non sp√©cifi√©"],
        ["3. R√©union du CTASF", etapes[2] if len(etapes) > 2 else "Non sp√©cifi√©"],
        ["4. D√©lib√©ration", etapes[3] if len(etapes) > 3 else "Non sp√©cifi√©"]
    ]

    for etape in etapes_data:
        status = etape[1].lower()
        if "compl√©t" in status:
            icon = "‚úÖ"
        elif "en cours" in status:
            icon = "üîÑ"
        else:
            icon = "‚≠ï"

        st.write(f"{icon} **{etape[0]}** : {etape[1]}")


# Alias pour compatibilit√©
def afficher_progression(df_etapes=None):
    """
    Fonction de compatibilit√© pour l'appel depuis dashboard.py
    Cette fonction est un simple alias vers afficher_etat_avancement

    Args:
        df_etapes: DataFrame optionnel contenant les donn√©es d'avancement
    """
    afficher_etat_avancement(df_etapes)
