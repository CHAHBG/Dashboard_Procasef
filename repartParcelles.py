import streamlit as st
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go


def afficher_dashboard_parcelles(df_parcelles):
    """
    Affiche le tableau de bord des parcelles organis√© en onglets

    Args:
        df_parcelles (DataFrame): Dataframe contenant les donn√©es des parcelles
    """
    # V√©rifier si le DataFrame est vide
    if df_parcelles.empty:
        st.warning("‚ö†Ô∏è Aucune donn√©e de parcelles disponible. Veuillez t√©l√©charger un fichier de donn√©es.")
        return

    # Statistiques globales toujours visibles en haut de la page
    st.header("üìä Tableau de Bord des Parcelles")

    # V√©rifier la pr√©sence des colonnes n√©cessaires
    required_columns = ['nicad', 'statut_deliberation', 'superficie']
    missing_columns = [col for col in required_columns if col not in df_parcelles.columns]

    if missing_columns:
        st.error(f"‚ùå Colonnes manquantes dans les donn√©es: {missing_columns}")
        st.info("Les colonnes suivantes sont requises: nicad, statut_deliberation, superficie")
        return

    with st.container():
        col1, col2, col3, col4 = st.columns(4)

        # Calculer les m√©triques avec gestion des erreurs
        total_parcelles = len(df_parcelles)

        try:
            parcelles_nicad = (df_parcelles["nicad"] == "Avec NICAD").sum()
        except:
            parcelles_nicad = 0

        try:
            parcelles_deliberees = (df_parcelles["statut_deliberation"] == "D√©lib√©r√©e").sum()
        except:
            parcelles_deliberees = 0

        try:
            superficie_totale = df_parcelles['superficie'].sum()
        except:
            superficie_totale = 0

        col1.metric("Nombre total de parcelles", total_parcelles)
        col2.metric("Parcelles NICAD", parcelles_nicad)
        col3.metric("Parcelles d√©lib√©r√©es", parcelles_deliberees)
        col4.metric("Superficie totale (m¬≤)", f"{superficie_totale:,.2f}")

    # Cr√©ation des onglets principaux
    tab_vue_globale, tab_par_commune, tab_details, tab_donnees = st.tabs([
        "üåç Vue Globale",
        "üèòÔ∏è Analyse par Commune",
        "üìç Analyse D√©taill√©e",
        "üßæ Donn√©es"
    ])

    # ===== TAB 1: VUE GLOBALE =====
    with tab_vue_globale:
        col_nicad, col_deliberation = st.columns(2)

        with col_nicad:
            # R√©partition NICAD
            if 'nicad' in df_parcelles.columns and not df_parcelles['nicad'].empty:
                fig_global_nicad = px.pie(
                    df_parcelles,
                    names="nicad",
                    title="R√©partition globale des parcelles NICAD",
                    labels={"nicad": "Statut NICAD"}
                )
                fig_global_nicad.update_traces(
                    textposition='inside',
                    textinfo='percent+label'
                )
                fig_global_nicad.update_layout(
                    showlegend=True,
                    legend=dict(
                        orientation="v",
                        yanchor="top",
                        y=1,
                        xanchor="left",
                        x=1.05
                    )
                )
                st.plotly_chart(fig_global_nicad, use_container_width=True)
            else:
                st.info("Donn√©es NICAD non disponibles")

        with col_deliberation:
            # R√©partition d√©lib√©ration
            if 'statut_deliberation' in df_parcelles.columns and not df_parcelles['statut_deliberation'].empty:
                fig_global_deliberation = px.pie(
                    df_parcelles,
                    names="statut_deliberation",
                    title="R√©partition des parcelles d√©lib√©r√©es",
                    labels={"statut_deliberation": "Statut d√©lib√©ration"}
                )
                fig_global_deliberation.update_traces(
                    textposition='inside',
                    textinfo='percent+label'
                )
                fig_global_deliberation.update_layout(
                    showlegend=True,
                    legend=dict(
                        orientation="v",
                        yanchor="top",
                        y=1,
                        xanchor="left",
                        x=1.05
                    )
                )
                st.plotly_chart(fig_global_deliberation, use_container_width=True)
            else:
                st.info("Donn√©es de d√©lib√©ration non disponibles")

        # Relation NICAD et d√©lib√©ration
        if 'nicad' in df_parcelles.columns and 'statut_deliberation' in df_parcelles.columns:
            st.subheader("üîÑ Relation entre NICAD et d√©lib√©ration")
            nicad_delib_data = df_parcelles.groupby(["nicad", "statut_deliberation"]).size().reset_index(
                name="Nombre de parcelles")

            if not nicad_delib_data.empty:
                fig_relation = px.bar(
                    nicad_delib_data,
                    x="nicad",
                    y="Nombre de parcelles",
                    color="statut_deliberation",
                    barmode="group",
                    title="Relation entre statut NICAD et d√©lib√©ration",
                    labels={"nicad": "Statut NICAD", "statut_deliberation": "Statut d√©lib√©ration"}
                )
                st.plotly_chart(fig_relation, use_container_width=True)
            else:
                st.info("Donn√©es insuffisantes pour afficher la relation NICAD/d√©lib√©ration")

        # R√©partition par usage
        if "type_usag" in df_parcelles.columns and not df_parcelles["type_usag"].empty:
            st.subheader("üèóÔ∏è R√©partition par usage des parcelles")

            # Option pour choisir le type de visualisation
            type_viz_usage = st.radio(
                "Type de visualisation :",
                ["Graphique en secteurs", "Graphique en barres"],
                key="viz_usage_global"
            )

            col_usage, col_usage_delib = st.columns(2)

            with col_usage:
                if type_viz_usage == "Graphique en secteurs":
                    # Calculer les pourcentages pour affichage personnalis√©
                    usage_counts = df_parcelles["type_usag"].value_counts()
                    usage_percentages = (usage_counts / len(df_parcelles) * 100).round(1)

                    fig_usage = px.pie(
                        values=usage_counts.values,
                        names=usage_counts.index,
                        title="R√©partition des usages"
                    )

                    # Configuration am√©lior√©e pour les labels
                    fig_usage.update_traces(
                        textposition='auto',
                        textinfo='label+percent',
                        textfont_size=10,
                        pull=[0.05 if val < usage_counts.max() * 0.1 else 0 for val in usage_counts.values]
                        # S√©parer les petites parts
                    )

                    fig_usage.update_layout(
                        showlegend=True,
                        legend=dict(
                            orientation="v",
                            yanchor="middle",
                            y=0.5,
                            xanchor="left",
                            x=1.05,
                            font=dict(size=10)
                        ),
                        margin=dict(l=20, r=120, t=50, b=20),
                        height=400
                    )

                else:
                    # Graphique en barres horizontal pour plus de lisibilit√©
                    usage_counts = df_parcelles["type_usag"].value_counts().reset_index()
                    usage_counts.columns = ['Usage', 'Nombre']

                    fig_usage = px.bar(
                        usage_counts,
                        x='Nombre',
                        y='Usage',
                        orientation='h',
                        title="R√©partition des usages",
                        text='Nombre'
                    )
                    fig_usage.update_traces(texttemplate='%{text}', textposition='outside')
                    fig_usage.update_layout(height=400, yaxis={'categoryorder': 'total ascending'})

                st.plotly_chart(fig_usage, use_container_width=True)

            with col_usage_delib:
                # Graphique montrant la r√©partition des d√©lib√©rations par type d'usage
                if 'statut_deliberation' in df_parcelles.columns:
                    usage_delib_data = df_parcelles.groupby(["type_usag", "statut_deliberation"]).size().reset_index(
                        name="Nombre")

                    if not usage_delib_data.empty:
                        fig_usage_delib = px.bar(
                            usage_delib_data,
                            x="type_usag",
                            y="Nombre",
                            color="statut_deliberation",
                            barmode="group",title="D√©lib√©ration par type d'usage",
                            labels={"type_usag": "Type d'usage", "statut_deliberation": "Statut d√©lib√©ration"}
                        )
                        fig_usage_delib.update_xaxes(tickangle=45)
                        st.plotly_chart(fig_usage_delib, use_container_width=True)
                    else:
                        st.info("Donn√©es insuffisantes pour afficher la d√©lib√©ration par usage")
                else:
                    st.info("Donn√©es de d√©lib√©ration non disponibles")
    
    # ===== TAB 2: ANALYSE PAR COMMUNE =====
    with tab_par_commune:
        if 'commune' in df_parcelles.columns and not df_parcelles['commune'].empty:
            st.subheader("üèòÔ∏è Analyse par commune")
            
            # S√©lection de la commune
            communes_list = ['Toutes les communes'] + sorted(df_parcelles['commune'].unique().tolist())
            commune_selectionnee = st.selectbox("S√©lectionnez une commune :", communes_list)
            
            # Filtrer les donn√©es selon la commune s√©lectionn√©e
            if commune_selectionnee != 'Toutes les communes':
                df_filtered = df_parcelles[df_parcelles['commune'] == commune_selectionnee]
            else:
                df_filtered = df_parcelles
            
            # M√©triques pour la commune s√©lectionn√©e
            col1, col2, col3, col4 = st.columns(4)
            
            total_parcelles_commune = len(df_filtered)
            parcelles_nicad_commune = (df_filtered["nicad"] == "Avec NICAD").sum() if 'nicad' in df_filtered.columns else 0
            parcelles_deliberees_commune = (df_filtered["statut_deliberation"] == "D√©lib√©r√©e").sum() if 'statut_deliberation' in df_filtered.columns else 0
            superficie_commune = df_filtered['superficie'].sum() if 'superficie' in df_filtered.columns else 0
            
            col1.metric("Parcelles", total_parcelles_commune)
            col2.metric("NICAD", parcelles_nicad_commune)
            col3.metric("D√©lib√©r√©es", parcelles_deliberees_commune)
            col4.metric("Superficie (m¬≤)", f"{superficie_commune:,.2f}")
            
            # Graphiques par commune
            if commune_selectionnee == 'Toutes les communes':
                # Vue comparative entre toutes les communes
                col_commune1, col_commune2 = st.columns(2)
                
                with col_commune1:
                    # Nombre de parcelles par commune
                    parcelles_par_commune = df_parcelles['commune'].value_counts().reset_index()
                    parcelles_par_commune.columns = ['Commune', 'Nombre de parcelles']
                    
                    fig_communes = px.bar(
                        parcelles_par_commune.head(10),  # Top 10 communes
                        x='Commune',
                        y='Nombre de parcelles',
                        title="Top 10 communes par nombre de parcelles"
                    )
                    fig_communes.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_communes, use_container_width=True)
                
                with col_commune2:
                    # Superficie par commune
                    if 'superficie' in df_parcelles.columns:
                        superficie_par_commune = df_parcelles.groupby('commune')['superficie'].sum().reset_index()
                        superficie_par_commune = superficie_par_commune.sort_values('superficie', ascending=False).head(10)
                        
                        fig_superficie = px.bar(
                            superficie_par_commune,
                            x='commune',
                            y='superficie',
                            title="Top 10 communes par superficie totale"
                        )
                        fig_superficie.update_xaxes(tickangle=45)
                        st.plotly_chart(fig_superficie, use_container_width=True)
                    else:
                        st.info("Donn√©es de superficie non disponibles")
                
                # Tableau r√©capitulatif par commune
                st.subheader("üìã R√©capitulatif par commune")
                summary_commune = df_parcelles.groupby('commune').agg({
                    'nicad': lambda x: (x == "Avec NICAD").sum() if 'nicad' in df_parcelles.columns else 0,
                    'statut_deliberation': lambda x: (x == "D√©lib√©r√©e").sum() if 'statut_deliberation' in df_parcelles.columns else 0,
                    'superficie': 'sum' if 'superficie' in df_parcelles.columns else lambda x: 0
                }).reset_index()
                
                summary_commune.columns = ['Commune', 'Parcelles NICAD', 'Parcelles d√©lib√©r√©es', 'Superficie totale']
                summary_commune['Nombre total parcelles'] = df_parcelles['commune'].value_counts().values
                
                # R√©organiser les colonnes
                summary_commune = summary_commune[['Commune', 'Nombre total parcelles', 'Parcelles NICAD', 'Parcelles d√©lib√©r√©es', 'Superficie totale']]
                summary_commune = summary_commune.sort_values('Nombre total parcelles', ascending=False)
                
                st.dataframe(summary_commune, use_container_width=True)
            
            else:
                # Vue d√©taill√©e pour une commune sp√©cifique
                col_detail1, col_detail2 = st.columns(2)
                
                with col_detail1:
                    # R√©partition NICAD pour la commune
                    if 'nicad' in df_filtered.columns and not df_filtered['nicad'].empty:
                        fig_nicad_commune = px.pie(
                            df_filtered,
                            names="nicad",
                            title=f"R√©partition NICAD - {commune_selectionnee}"
                        )
                        st.plotly_chart(fig_nicad_commune, use_container_width=True)
                    else:
                        st.info("Donn√©es NICAD non disponibles pour cette commune")
                
                with col_detail2:
                    # R√©partition d√©lib√©ration pour la commune
                    if 'statut_deliberation' in df_filtered.columns and not df_filtered['statut_deliberation'].empty:
                        fig_delib_commune = px.pie(
                            df_filtered,
                            names="statut_deliberation",
                            title=f"R√©partition d√©lib√©ration - {commune_selectionnee}"
                        )
                        st.plotly_chart(fig_delib_commune, use_container_width=True)
                    else:
                        st.info("Donn√©es de d√©lib√©ration non disponibles pour cette commune")
                
                # R√©partition par usage pour la commune
                if 'type_usag' in df_filtered.columns and not df_filtered['type_usag'].empty:
                    st.subheader(f"üèóÔ∏è R√©partition par usage - {commune_selectionnee}")
                    
                    usage_commune = df_filtered['type_usag'].value_counts().reset_index()
                    usage_commune.columns = ['Usage', 'Nombre']
                    
                    fig_usage_commune = px.bar(
                        usage_commune,
                        x='Usage',
                        y='Nombre',
                        title=f"R√©partition des usages - {commune_selectionnee}"
                    )
                    fig_usage_commune.update_xaxes(tickangle=45)
                    st.plotly_chart(fig_usage_commune, use_container_width=True)
        
        else:
            st.info("Donn√©es de commune non disponibles")
    
    # ===== TAB 3: ANALYSE D√âTAILL√âE =====
    with tab_details:
        st.subheader("üìç Analyse d√©taill√©e")
        
        # Filtres interactifs
        st.sidebar.header("üîç Filtres")
        
        # Filtre par commune
        if 'commune' in df_parcelles.columns:
            communes_filtre = st.sidebar.multiselect(
                "Communes",
                options=df_parcelles['commune'].unique(),
                default=df_parcelles['commune'].unique()
            )
            df_filtered_details = df_parcelles[df_parcelles['commune'].isin(communes_filtre)]
        else:
            df_filtered_details = df_parcelles
        
        # Filtre par NICAD
        if 'nicad' in df_parcelles.columns:
            nicad_filtre = st.sidebar.multiselect(
                "Statut NICAD",
                options=df_parcelles['nicad'].unique(),
                default=df_parcelles['nicad'].unique()
            )
            df_filtered_details = df_filtered_details[df_filtered_details['nicad'].isin(nicad_filtre)]
        
        # Filtre par d√©lib√©ration
        if 'statut_deliberation' in df_parcelles.columns:
            deliberation_filtre = st.sidebar.multiselect(
                "Statut d√©lib√©ration",
                options=df_parcelles['statut_deliberation'].unique(),
                default=df_parcelles['statut_deliberation'].unique()
            )
            df_filtered_details = df_filtered_details[df_filtered_details['statut_deliberation'].isin(deliberation_filtre)]
        
        # Filtre par usage
        if 'type_usag' in df_parcelles.columns:
            usage_filtre = st.sidebar.multiselect(
                "Type d'usage",
                options=df_parcelles['type_usag'].unique(),
                default=df_parcelles['type_usag'].unique()
            )
            df_filtered_details = df_filtered_details[df_filtered_details['type_usag'].isin(usage_filtre)]
        
        # Filtre par superficie
        if 'superficie' in df_parcelles.columns:
            superficie_min = float(df_parcelles['superficie'].min())
            superficie_max = float(df_parcelles['superficie'].max())
            superficie_range = st.sidebar.slider(
                "Superficie (m¬≤)",
                min_value=superficie_min,
                max_value=superficie_max,
                value=(superficie_min, superficie_max)
            )
            df_filtered_details = df_filtered_details[
                (df_filtered_details['superficie'] >= superficie_range[0]) & 
                (df_filtered_details['superficie'] <= superficie_range[1])
            ]
        
        # Affichage des r√©sultats filtr√©s
        st.write(f"**Nombre de parcelles apr√®s filtrage : {len(df_filtered_details)}**")
        
        if len(df_filtered_details) > 0:
            # M√©triques des donn√©es filtr√©es
            col1, col2, col3, col4 = st.columns(4)
            
            total_filtrees = len(df_filtered_details)
            nicad_filtrees = (df_filtered_details["nicad"] == "Avec NICAD").sum() if 'nicad' in df_filtered_details.columns else 0
            deliberees_filtrees = (df_filtered_details["statut_deliberation"] == "D√©lib√©r√©e").sum() if 'statut_deliberation' in df_filtered_details.columns else 0
            superficie_filtrees = df_filtered_details['superficie'].sum() if 'superficie' in df_filtered_details.columns else 0
            
            col1.metric("Total", total_filtrees)
            col2.metric("NICAD", nicad_filtrees)
            col3.metric("D√©lib√©r√©es", deliberees_filtrees)
            col4.metric("Superficie", f"{superficie_filtrees:,.2f} m¬≤")
            
            # Graphiques des donn√©es filtr√©es
            if len(df_filtered_details) > 1:
                col_graph1, col_graph2 = st.columns(2)
                
                with col_graph1:
                    # Distribution des superficies
                    if 'superficie' in df_filtered_details.columns:
                        fig_hist = px.histogram(
                            df_filtered_details,
                            x='superficie',
                            nbins=20,
                            title="Distribution des superficies (donn√©es filtr√©es)"
                        )
                        st.plotly_chart(fig_hist, use_container_width=True)
                
                with col_graph2:
                    # Analyse crois√©e
                    if 'nicad' in df_filtered_details.columns and 'statut_deliberation' in df_filtered_details.columns:
                        crosstab = pd.crosstab(df_filtered_details['nicad'], df_filtered_details['statut_deliberation'])
                        fig_heatmap = px.imshow(
                            crosstab,
                            text_auto=True,
                            aspect="auto",
                            title="Analyse crois√©e NICAD vs D√©lib√©ration"
                        )
                        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        else:
            st.warning("Aucune parcelle ne correspond aux filtres s√©lectionn√©s.")
    
    # ===== TAB 4: DONN√âES =====
    with tab_donnees:
        st.subheader("üßæ Donn√©es brutes")
        
        # Options d'affichage
        col_options1, col_options2 = st.columns(2)
        
        with col_options1:
            nb_lignes = st.selectbox(
                "Nombre de lignes √† afficher",
                options=[10, 25, 50, 100, len(df_parcelles)],
                index=1
            )
        
        with col_options2:
            if st.button("üì• T√©l√©charger les donn√©es (CSV)"):
                csv = df_parcelles.to_csv(index=False)
                st.download_button(
                    label="T√©l√©charger CSV",
                    data=csv,
                    file_name="parcelles_data.csv",
                    mime="text/csv"
                )
        
        # Affichage du tableau
        st.dataframe(df_parcelles.head(nb_lignes), use_container_width=True)
        
        # Informations sur les donn√©es
        st.subheader("‚ÑπÔ∏è Informations sur les donn√©es")
        
        col_info1, col_info2 = st.columns(2)
        
        with col_info1:
            st.write("**Dimensions du dataset :**")
            st.write(f"- Nombre de lignes : {len(df_parcelles)}")
            st.write(f"- Nombre de colonnes : {len(df_parcelles.columns)}")
        
        with col_info2:
            st.write("**Colonnes disponibles :**")
            for col in df_parcelles.columns:
                st.write(f"- {col}")
        
        # Statistiques descriptives
        if st.checkbox("Afficher les statistiques descriptives"):
            st.subheader("üìä Statistiques descriptives")
            
            # S√©lection des colonnes num√©riques
            numeric_columns = df_parcelles.select_dtypes(include=['number']).columns
            
            if len(numeric_columns) > 0:
                selected_columns = st.multiselect(
                    "S√©lectionnez les colonnes num√©riques √† analyser",
                    options=numeric_columns,
                    default=numeric_columns[:3] if len(numeric_columns) >= 3 else numeric_columns
                )
                
                if selected_columns:
                    st.dataframe(df_parcelles[selected_columns].describe(), use_container_width=True)
                else:
                    st.info("S√©lectionnez au moins une colonne num√©rique")
            else:
                st.info("Aucune colonne num√©rique disponible pour les statistiques")
        
        # V√©rification de la qualit√© des donn√©es
        if st.checkbox("V√©rifier la qualit√© des donn√©es"):
            st.subheader("üîç Qualit√© des donn√©es")
            
            # Valeurs manquantes
            missing_data = df_parcelles.isnull().sum()
            missing_percentage = (missing_data / len(df_parcelles)) * 100
            
            quality_df = pd.DataFrame({
                'Colonne': missing_data.index,
                'Valeurs manquantes': missing_data.values,
                'Pourcentage': missing_percentage.values
            })
            
            quality_df = quality_df[quality_df['Valeurs manquantes'] > 0]
            
            if len(quality_df) > 0:
                st.warning("‚ö†Ô∏è Valeurs manquantes d√©tect√©es :")
                st.dataframe(quality_df, use_container_width=True)
            else:
                st.success("‚úÖ Aucune valeur manquante d√©tect√©e")
            
            # Doublons
            nb_doublons = df_parcelles.duplicated().sum()
            if nb_doublons > 0:
                st.warning(f"‚ö†Ô∏è {nb_doublons} lignes dupliqu√©es d√©tect√©es")
            else:
                st.success("‚úÖ Aucune ligne dupliqu√©e d√©tect√©e")


# Fonction utilitaire pour le pr√©processing des donn√©es
def preprocess_parcelles_data(df):
    """
    Pr√©processe les donn√©es des parcelles pour le dashboard
    
    Args:
        df (DataFrame): Dataframe brut des parcelles
        
    Returns:
        DataFrame: Dataframe pr√©process√©
    """
    # Copie du dataframe pour √©viter les modifications du dataframe original
    df_processed = df.copy()
    
    # Nettoyage des colonnes de texte
    text_columns = df_processed.select_dtypes(include=['object']).columns
    for col in text_columns:
        df_processed[col] = df_processed[col].astype(str).str.strip()
    
    # Conversion des colonnes num√©riques
    numeric_columns = ['superficie']
    for col in numeric_columns:
        if col in df_processed.columns:
            df_processed[col] = pd.to_numeric(df_processed[col], errors='coerce')
    
    # Normalisation des valeurs cat√©gorielles
    categorical_mappings = {
        'nicad': {'1': 'Avec NICAD', '0': 'Sans NICAD', 'True': 'Avec NICAD', 'False': 'Sans NICAD'},
        'statut_deliberation': {'1': 'D√©lib√©r√©e', '0': 'Non d√©lib√©r√©e', 'True': 'D√©lib√©r√©e', 'False': 'Non d√©lib√©r√©e'}
    }
    
    for col, mapping in categorical_mappings.items():
        if col in df_processed.columns:
            df_processed[col] = df_processed[col].map(mapping).fillna(df_processed[col])
    
    return df_processed


# Fonction principale pour lancer le dashboard
def main():
    """
    Fonction principale pour lancer le dashboard des parcelles
    """
    st.set_page_config(
        page_title="Dashboard Parcelles",
        page_icon="üèòÔ∏è",
        layout="wide"
    )
    
    # Titre principal
    st.title("üèòÔ∏è Dashboard de Gestion des Parcelles")
    
    # Upload de fichier
    uploaded_file = st.file_uploader(
        "Choisissez un fichier de donn√©es des parcelles",
        type=['csv', 'xlsx', 'xls']
    )
    
    if uploaded_file is not None:
        try:
            # Lecture du fichier
            if uploaded_file.name.endswith('.csv'):
                df_parcelles = pd.read_csv(uploaded_file)
            else:
                df_parcelles = pd.read_excel(uploaded_file)
            
            # Pr√©processing des donn√©es
            df_parcelles = preprocess_parcelles_data(df_parcelles)
            
            # Affichage du dashboard
            afficher_dashboard_parcelles(df_parcelles)
            
        except Exception as e:
            st.error(f"Erreur lors du chargement du fichier : {str(e)}")
            st.info("Veuillez v√©rifier le format de votre fichier et r√©essayer.")
    
    else:
        st.info("üëÜ Veuillez t√©l√©charger un fichier de donn√©es pour commencer l'analyse.")
        
        # Affichage d'un exemple de structure de donn√©es attendue
        st.subheader("üìã Structure de donn√©es attendue")
        st.write("Votre fichier doit contenir au minimum les colonnes suivantes :")
        
        exemple_data = {
            'nicad': ['Avec NICAD', 'Sans NICAD', 'Avec NICAD'],
            'statut_deliberation': ['D√©lib√©r√©e', 'Non d√©lib√©r√©e', 'D√©lib√©r√©e'],
            'superficie': [1200.5, 800.0, 1500.2],
            'commune': ['Commune A', 'Commune B', 'Commune A'],
            'type_usag': ['R√©sidentiel', 'Commercial', 'Industriel']
        }
        
        df_exemple = pd.DataFrame(exemple_data)
        st.dataframe(df_exemple, use_container_width=True)


if __name__ == "__main__":
    main()
