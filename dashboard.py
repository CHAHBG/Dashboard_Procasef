import streamlit as st
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go


# Chargement des donn√©es
@st.cache_data
def charger_parcelles():
    df = pd.read_excel("parcelles.xlsx", engine="openpyxl")
    df.columns = df.columns.str.lower()
    # Traitement du statut NICAD
    df["nicad"] = df["nicad"].astype(str).str.strip().str.lower() == "oui"
    df["nicad"] = df["nicad"].map({True: "Avec NICAD", False: "Sans NICAD"})

    # Ajout du traitement pour les parcelles d√©lib√©r√©es
    # Si la colonne existe d√©j√†, utiliser cette colonne, sinon cr√©er une colonne par d√©faut
    if "deliberee" in df.columns:
        df["deliberee"] = df["deliberee"].astype(str).str.strip().str.lower() == "oui"
        df["statut_deliberation"] = df["deliberee"].map({True: "D√©lib√©r√©e", False: "Non d√©lib√©r√©e"})
    else:
        # Colonne par d√©faut si elle n'existe pas dans le fichier
        df["statut_deliberation"] = "Non d√©lib√©r√©e"

    # Conversion et nettoyage des donn√©es
    df["superficie"] = pd.to_numeric(df["superficie"], errors="coerce")
    df["village"] = df["village"].fillna("Non sp√©cifi√©").replace("", "Non sp√©cifi√©")
    df["commune"] = df["commune"].fillna("Non sp√©cifi√©").replace("", "Non sp√©cifi√©")
    return df


df_parcelles = charger_parcelles()

st.title("üìä Tableau de Bord PROCASEF - Boundou")

onglet = st.sidebar.radio("Choisissez une vue :", ["R√©partition des parcelles", "√âtat d'avancement"])

if onglet == "R√©partition des parcelles":
    # ========================
    # Statistiques Globales
    # ========================
    with st.expander("üìå Statistiques Globales", expanded=True):
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Nombre total de parcelles", len(df_parcelles))
        col2.metric("Parcelles NICAD", (df_parcelles["nicad"] == "Avec NICAD").sum())
        col3.metric("Parcelles d√©lib√©r√©es", (df_parcelles["statut_deliberation"] == "D√©lib√©r√©e").sum())
        col4.metric("Superficie totale (m¬≤)", f"{df_parcelles['superficie'].sum():,.2f}")

    # ========================
    # R√©partition NICAD globale
    # ========================
    with st.expander("üìä R√©partition globale des parcelles NICAD", expanded=True):
        # Option pour afficher/cacher les graphiques
        display_option = st.radio("Afficher les graphiques :",
                                  ["Les deux", "NICAD uniquement", "D√©lib√©ration uniquement"])

        # Affichage des graphiques dans une seule colonne
        if display_option in ["Les deux", "NICAD uniquement"]:
            fig_global_nicad = px.pie(df_parcelles, names="nicad", title="R√©partition globale des parcelles NICAD",
                                      labels={"nicad": "Statut NICAD"})
            st.plotly_chart(fig_global_nicad, use_container_width=True, key="global_nicad_pie")

        if display_option in ["Les deux", "D√©lib√©ration uniquement"]:
            fig_global_deliberation = px.pie(df_parcelles, names="statut_deliberation",
                                             title="R√©partition des parcelles d√©lib√©r√©es",
                                             labels={"statut_deliberation": "Statut d√©lib√©ration"})
            st.plotly_chart(fig_global_deliberation, use_container_width=True, key="global_deliberation_pie")

    # ========================
    # Relation entre NICAD et d√©lib√©ration
    # ========================
    with st.expander("üîÑ Relation entre NICAD et d√©lib√©ration", expanded=True):
        nicad_delib_data = df_parcelles.groupby(["nicad", "statut_deliberation"]).size().reset_index(
            name="Nombre de parcelles")
        fig_relation = px.bar(nicad_delib_data, x="nicad", y="Nombre de parcelles", color="statut_deliberation",
                              barmode="group", title="Relation entre statut NICAD et d√©lib√©ration",
                              labels={"nicad": "Statut NICAD", "statut_deliberation": "Statut d√©lib√©ration"})
        st.plotly_chart(fig_relation, use_container_width=True, key="relation_bar")

    # ========================
    # R√©partition par Usage
    # ========================
    with st.expander("üèóÔ∏è R√©partition par usage des parcelles", expanded=True):
        if "type_usag" in df_parcelles.columns:
            # Option pour afficher/cacher les graphiques
            display_option_usage = st.radio("Afficher les graphiques :",
                                            ["Les deux", "Usage uniquement", "D√©lib√©ration uniquement"])

            # Affichage des graphiques dans une seule colonne
            if display_option_usage in ["Les deux", "Usage uniquement"]:
                fig_usage = px.pie(df_parcelles, names="type_usag", title="R√©partition des usages",
                                   labels={"type_usag": "Usage"})
                st.plotly_chart(fig_usage, use_container_width=True, key="usage_pie")

            if display_option_usage in ["Les deux", "D√©lib√©ration uniquement"]:
                # Graphique montrant la r√©partition des d√©lib√©rations par type d'usage
                usage_delib_data = df_parcelles.groupby(["type_usag", "statut_deliberation"]).size().reset_index(
                    name="Nombre")
                fig_usage_delib = px.bar(usage_delib_data, x="type_usag", y="Nombre", color="statut_deliberation",
                                         barmode="group", title="D√©lib√©ration par type d'usage",
                                         labels={"type_usag": "Usage", "statut_deliberation": "Statut d√©lib√©ration"})
                st.plotly_chart(fig_usage_delib, use_container_width=True, key="usage_delib_bar")
        else:
            st.info("Aucune colonne 'type_usag' trouv√©e dans les donn√©es.")
    # ========================
    # Statistiques par commune et village
    # ========================
    with st.expander("üìç Statistiques par commune et village", expanded=True):
        communes = ["Toutes"] + sorted(df_parcelles["commune"].dropna().unique())
        commune_selectionnee = st.selectbox("üèòÔ∏è Choisir une commune :", communes)

        if commune_selectionnee != "Toutes":
            df_filtre = df_parcelles[df_parcelles["commune"] == commune_selectionnee]
            villages = ["Tous"] + sorted(df_filtre["village"].dropna().unique())
        else:
            df_filtre = df_parcelles
            villages = ["Tous"] + sorted(df_parcelles["village"].dropna().unique())

        village_selectionne = st.selectbox("üìç Choisir un village :", villages)

        if village_selectionne != "Tous":
            df_filtre = df_filtre[df_filtre["village"] == village_selectionne]

        st.subheader(f"üìç Statistiques pour : {village_selectionne} ({commune_selectionnee})")
        col4, col5, col6, col7 = st.columns(4)
        col4.metric("Total parcelles", len(df_filtre))
        col5.metric("Parcelles NICAD", (df_filtre["nicad"] == "Avec NICAD").sum())
        col6.metric("Parcelles d√©lib√©r√©es", (df_filtre["statut_deliberation"] == "D√©lib√©r√©e").sum())
        col7.metric("Superficie totale", f"{df_filtre['superficie'].sum():,.2f}")

        # Option pour afficher/cacher les graphiques
        display_village_option = st.radio("Afficher les graphiques pour ce village/commune :",
                                          ["Les deux", "NICAD uniquement", "D√©lib√©ration uniquement"],
                                          key="village_display_option")

        # Affichage des graphiques dans un ordre s√©quentiel
        if display_village_option in ["Les deux", "NICAD uniquement"]:
            st.subheader("üìä R√©partition des parcelles NICAD")
            fig_village_nicad = px.pie(df_filtre, names="nicad", title="R√©partition NICAD - Donn√©es filtr√©es",
                                       labels={"nicad": "NICAD"})
            st.plotly_chart(fig_village_nicad, use_container_width=True, key="village_nicad_pie")

        if display_village_option in ["Les deux", "D√©lib√©ration uniquement"]:
            st.subheader("üìä R√©partition des parcelles d√©lib√©r√©es")
            fig_village_delib = px.pie(df_filtre, names="statut_deliberation",
                                       title="R√©partition d√©lib√©ration - Donn√©es filtr√©es",
                                       labels={"statut_deliberation": "D√©lib√©ration"})
            st.plotly_chart(fig_village_delib, use_container_width=True, key="village_delib_pie")

    # ========================
    # Statistiques par commune (Bar chart)
    # ========================
    with st.expander("üèòÔ∏è R√©partition des parcelles par commune", expanded=True):
        # Onglets pour choisir entre la vue NICAD et la vue d√©lib√©ration
        vue_commune = st.radio("Choisir la vue :", ["NICAD par commune", "D√©lib√©ration par commune"])

        if vue_commune == "NICAD par commune":
            commune_nicad_data = df_parcelles.groupby(["commune", "nicad"]).size().reset_index(
                name="Nombre de parcelles")
            fig_commune_nicad = px.bar(commune_nicad_data, x="commune", y="Nombre de parcelles", color="nicad",
                                       barmode="group", title="Parcelles avec/sans NICAD par commune",
                                       labels={"nicad": "NICAD"})
            st.plotly_chart(fig_commune_nicad, use_container_width=True, key="commune_nicad_bar")
        else:
            commune_delib_data = df_parcelles.groupby(["commune", "statut_deliberation"]).size().reset_index(
                name="Nombre de parcelles")
            fig_commune_delib = px.bar(commune_delib_data, x="commune", y="Nombre de parcelles",
                                       color="statut_deliberation",
                                       barmode="group", title="Parcelles d√©lib√©r√©es/non d√©lib√©r√©es par commune",
                                       labels={"statut_deliberation": "Statut d√©lib√©ration"})
            st.plotly_chart(fig_commune_delib, use_container_width=True, key="commune_delib_bar")

    # ========================
    # Taux de d√©lib√©ration par commune
    # ========================
    with st.expander("üìä Taux de d√©lib√©ration par commune", expanded=True):
        # Correction pour √©viter l'avertissement de d√©pr√©ciation
        # Calculer le taux de d√©lib√©ration par commune sans utiliser apply
        taux_delib_liste = []
        for commune in df_parcelles['commune'].unique():
            df_commune = df_parcelles[df_parcelles['commune'] == commune]
            total_parcelles = len(df_commune)
            parcelles_deliberees = (df_commune["statut_deliberation"] == "D√©lib√©r√©e").sum()
            taux = (parcelles_deliberees / total_parcelles * 100) if total_parcelles > 0 else 0
            taux_delib_liste.append({"commune": commune, "Taux de d√©lib√©ration (%)": taux})

        taux_delib = pd.DataFrame(taux_delib_liste)

        # Trier par taux d√©croissant
        taux_delib = taux_delib.sort_values(by="Taux de d√©lib√©ration (%)", ascending=False)

        fig_taux_delib = px.bar(taux_delib, x="commune", y="Taux de d√©lib√©ration (%)",
                                title="Taux de d√©lib√©ration par commune (%)",
                                color="Taux de d√©lib√©ration (%)",
                                color_continuous_scale=["red", "orange", "green"],
                                labels={"commune": "Commune"})

        st.plotly_chart(fig_taux_delib, use_container_width=True, key="taux_delib_bar")

    # ========================
    # Donn√©es filtr√©es
    # ========================
    with st.expander("üßæ Donn√©es filtr√©es", expanded=True):
        colonnes_affichees = ["commune", "village", "nicad", "statut_deliberation", "superficie"]
        if "type_usag" in df_filtre.columns:
            colonnes_affichees.append("type_usag")

        st.dataframe(df_filtre[colonnes_affichees], use_container_width=True)

elif onglet == "√âtat d'avancement":
    st.header("üìÖ √âtat d'avancement des communes")
    df_etapes = pd.read_excel("Etat des op√©rations Boundou-Mai 2025.xlsx", engine="openpyxl")
    df_etapes.fillna("", inplace=True)


    def evaluer_progres(etapes):
        # Correction: Consid√®re une √©tape d√©but√©e m√™me si elle n'est pas encore compl√©t√©e
        total = 4  # 4 √©tapes cl√©s
        score = 0
        etapes_list = [e.strip().lower() for e in etapes.split("\n") if e.strip() != ""]

        for etape in etapes_list:
            if "compl√©t" in etape or "affichage public (compl√©t√©s)" in etape:
                score += 1
            elif "en cours" in etape or "d√©but√©" in etape or "commenc√©" in etape:
                score += 0.5  # Attribuer un demi-point pour les √©tapes en cours

        return (score / total) * 100


    df_etapes["Progr√®s (%)"] = df_etapes["Progr√®s des √©tapes"].apply(evaluer_progres)

    # Calculer le nombre de communes d√©but√©es (ayant un progr√®s > 0%)
    # Correction: Une commune est consid√©r√©e comme d√©but√©e si elle a un score minimum
    communes_debutees = df_etapes[df_etapes["Progr√®s (%)"] > 0]
    pourcentage_debutees = (len(communes_debutees) / len(df_etapes)) * 100 if len(df_etapes) > 0 else 0

    # Afficher le nombre de communes d√©but√©es pour diagnostic
    st.sidebar.info(f"Nombre de communes d√©but√©es: {len(communes_debutees)}")

    regions = ["Toutes"] + sorted(df_etapes["R√©gion"].dropna().unique())
    communes = ["Toutes"] + sorted(df_etapes["Commune"].dropna().unique())
    csigs = ["Tous"] + sorted(df_etapes["CSIG"].dropna().unique())

    region_sel = st.selectbox("üåç Choisir une r√©gion :", regions)
    df_etapes_filtre = df_etapes if region_sel == "Toutes" else df_etapes[df_etapes["R√©gion"] == region_sel]

    commune_sel = st.selectbox("üèòÔ∏è Choisir une commune :", ["Toutes"] + sorted(df_etapes_filtre["Commune"].unique()))
    df_etapes_filtre = df_etapes_filtre if commune_sel == "Toutes" else df_etapes_filtre[
        df_etapes_filtre["Commune"] == commune_sel]

    csig_sel = st.selectbox("üìå Choisir un CSIG :", ["Tous"] + sorted(df_etapes_filtre["CSIG"].unique()))
    df_etapes_filtre = df_etapes_filtre if csig_sel == "Tous" else df_etapes_filtre[
        df_etapes_filtre["CSIG"] == csig_sel]

    # Affichage d'une l√©gende des couleurs
    st.write("""
    ## L√©gende des indicateurs d'avancement:
    """)

    col_leg1, col_leg2, col_leg3, col_leg4 = st.columns(4)
    with col_leg1:
        st.markdown("üî¥ **0-25%** : Non commenc√©")
    with col_leg2:
        st.markdown("üü† **25-50%** : En cours")
    with col_leg3:
        st.markdown("üü° **50-75%** : En cours avanc√©")
    with col_leg4:
        st.markdown("üü¢ **75-100%** : Pr√®s de la fin")

    st.markdown("---")

    # Si aucune s√©lection sp√©cifique n'est faite (r√©gion, commune et CSIG sur "Toutes/Tous")
    if region_sel == "Toutes" and commune_sel == "Toutes" and csig_sel == "Tous":
        st.subheader("üìä Vue globale de l'avancement du projet")

        # Statistiques globales
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Nombre total de communes", len(df_etapes))
        with col2:
            st.metric("Communes ayant d√©but√©", len(communes_debutees))
        with col3:
            st.metric("Pourcentage de d√©marrage", f"{pourcentage_debutees:.1f}%")

        # Pour diagnostic: Afficher les d√©tails des communes d√©but√©es
        with st.expander("D√©tails des communes d√©but√©es (diagnostic)", expanded=False):
            st.dataframe(communes_debutees[["Commune", "Progr√®s (%)", "Progr√®s des √©tapes"]], use_container_width=True)

        # Graphique d'avancement global
        st.subheader("üìà Avancement moyen par r√©gion")

        # Calculer la moyenne de progression par r√©gion
        region_progress = df_etapes.groupby("R√©gion")["Progr√®s (%)"].mean().reset_index()

        # Cr√©er un graphique √† barres pour les r√©gions
        fig_regions_bar = px.bar(
            region_progress,
            x="R√©gion",
            y="Progr√®s (%)",
            title="Progression moyenne par r√©gion",
            color="Progr√®s (%)",
            color_continuous_scale=["red", "orange", "gold", "green"],
            range_color=[0, 100]
        )

        fig_regions_bar.update_layout(
            height=400,
            xaxis_title="R√©gion",
            yaxis_title="Progr√®s moyen (%)",
            yaxis=dict(range=[0, 100])
        )

        st.plotly_chart(fig_regions_bar, use_container_width=True)

        # R√©sum√© des communes par √©tat d'avancement
        st.subheader("üîç R√©sum√© des communes par √©tat d'avancement")

        # Cat√©goriser les communes par leur √©tat d'avancement
        df_etapes["Cat√©gorie"] = pd.cut(
            df_etapes["Progr√®s (%)"],
            bins=[0, 0.1, 25, 50, 75, 100],
            labels=["Non d√©but√©es", "D√©but√©es (<25%)", "En cours (25-50%)", "Avanc√©es (50-75%)",
                    "Presque termin√©es (>75%)"]
        )

        resume = df_etapes["Cat√©gorie"].value_counts().reset_index()
        resume.columns = ["√âtat d'avancement", "Nombre de communes"]

        fig_resume = px.pie(
            resume,
            values="Nombre de communes",
            names="√âtat d'avancement",
            title="R√©partition des communes par √©tat d'avancement",
            color="√âtat d'avancement",
            color_discrete_map={
                "Non d√©but√©es": "lightgray",
                "D√©but√©es (<25%)": "red",
                "En cours (25-50%)": "orange",
                "Avanc√©es (50-75%)": "gold",
                "Presque termin√©es (>75%)": "green"
            }
        )

        st.plotly_chart(fig_resume, use_container_width=True)

    # Si une r√©gion est s√©lectionn√©e mais pas de commune ou CSIG sp√©cifique
    elif region_sel != "Toutes" and commune_sel == "Toutes" and csig_sel == "Tous":
        st.subheader(f"üìä Vue d'ensemble pour la r√©gion: {region_sel}")

        # Statistiques pour la r√©gion
        communes_region = len(df_etapes_filtre)
        communes_debutees_region = len(df_etapes_filtre[df_etapes_filtre["Progr√®s (%)"] > 0])
        pourcentage_debutees_region = (communes_debutees_region / communes_region) * 100 if communes_region > 0 else 0
        progres_moyen_region = df_etapes_filtre["Progr√®s (%)"].mean()

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Communes dans la r√©gion", communes_region)
        with col2:
            st.metric("Communes ayant d√©but√©", communes_debutees_region)
        with col3:
            st.metric("Progr√®s moyen", f"{progres_moyen_region:.1f}%")

        # Tableau r√©capitulatif des communes de la r√©gion
        st.subheader(f"üèòÔ∏è R√©sum√© des communes de {region_sel}")

        # Cr√©er un tableau synth√©tique des communes
        resume_communes = df_etapes_filtre[["Commune", "CSIG", "Progr√®s (%)", "Date D√©but"]].copy()


        # Ajouter une colonne pour l'indicateur visuel
        def get_progress_indicator(progress):
            if progress < 0.1:
                return "‚ö™ Non d√©but√©"
            elif progress < 25:
                return "üî¥ D√©but√©"
            elif progress < 50:
                return "üü† En cours"
            elif progress < 75:
                return "üü° Avanc√©"
            else:
                return "üü¢ Pr√®s de la fin"


        resume_communes["√âtat"] = resume_communes["Progr√®s (%)"].apply(get_progress_indicator)

        # Trier par progr√®s d√©croissant
        resume_communes = resume_communes.sort_values(by="Progr√®s (%)", ascending=False)

        st.dataframe(resume_communes, use_container_width=True)

        # Graphique √† barres pour visualiser l'avancement des communes
        fig_communes = px.bar(
            resume_communes.sort_values(by="Progr√®s (%)", ascending=True),
            y="Commune",
            x="Progr√®s (%)",
            orientation="h",
            color="Progr√®s (%)",
            color_continuous_scale=["red", "orange", "gold", "green"],
            title=f"Avancement des communes de {region_sel}",
            range_color=[0, 100]
        )

        fig_communes.update_layout(
            height=max(400, len(resume_communes) * 30),  # Adapter la hauteur au nombre de communes
            xaxis=dict(range=[0, 100])
        )

        st.plotly_chart(fig_communes, use_container_width=True)

    # Si une commune sp√©cifique ou un CSIG sp√©cifique est s√©lectionn√©, afficher les d√©tails
    else:
        # Parcourir et afficher les donn√©es de chaque commune filtr√©e
        for idx, row in df_etapes_filtre.iterrows():
            progress = row["Progr√®s (%)"]

            # D√©termination des couleurs selon le niveau d'avancement
            if progress < 25:
                color = "red"
                steps = [{"range": [0, 25], "color": "lightgray"}]
                threshold_color = "red"
            elif progress < 50:
                color = "orange"
                steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "lightgray"}]
                threshold_color = "orange"
            elif progress < 75:
                color = "gold"
                steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "orange"},
                         {"range": [50, 75], "color": "lightgray"}]
                threshold_color = "gold"
            else:
                color = "green"
                steps = [{"range": [0, 25], "color": "red"}, {"range": [25, 50], "color": "orange"},
                         {"range": [50, 75], "color": "gold"}, {"range": [75, 100], "color": "lightgray"}]
                threshold_color = "green"

            st.subheader(f"Avancement pour {row['Commune']} - CSIG : {row['CSIG']}")

            # Cr√©er deux colonnes pour afficher la jauge et les informations
            col1, col2 = st.columns([1, 2])

            with col1:
                # Cr√©ation d'une jauge (gauge) stylis√©e
                fig = go.Figure(go.Indicator(
                    mode="gauge+number",
                    value=progress,
                    domain={"x": [0, 1], "y": [0, 1]},
                    title={"text": f"Progr√®s: {progress:.1f}%"},
                    gauge={
                        "axis": {"range": [0, 100], "tickwidth": 1, "tickcolor": "darkblue"},
                        "bar": {"color": color},
                        "bgcolor": "white",
                        "borderwidth": 2,
                        "bordercolor": "gray",
                        "steps": steps,
                        "threshold": {
                            "line": {"color": "black", "width": 4},
                            "thickness": 0.75,
                            "value": progress
                        }
                    }
                ))

                # Configuration du layout pour une meilleure visualisation
                fig.update_layout(
                    height=300,
                    margin=dict(l=10, r=10, t=50, b=10),
                    paper_bgcolor="rgba(0,0,0,0)",
                    font={"color": "darkblue", "family": "Arial"}
                )

                st.plotly_chart(fig, use_container_width=True, key=f"gauge_{row['Commune']}_{idx}")

            with col2:
                # Affichage des informations de la commune
                start_date = row.get("Date D√©but", "Non sp√©cifi√©e")
                expected_end_date = row.get("Date de pr√©vision de compl√©ter les inventaires fonciers", "Non sp√©cifi√©e")

                st.write(f"üìÖ **Date de d√©but des op√©rations** : {start_date}")
                st.write(f"üìÖ **Date de fin pr√©vue** : {expected_end_date}")

                # Affichage des √©tapes d'avancement sous forme de tableau
                etapes = row.get("Progr√®s des √©tapes", "").split("\n")

                st.write("#### üîÑ Progression des √©tapes:")

                # Cr√©ation d'un tableau d'avancement avec des indicateurs color√©s
                etapes_data = [
                    ["1. Lev√©s topo et enqu√™tes", etapes[0] if len(etapes) > 0 else "Non sp√©cifi√©"],
                    ["2. Affichage public", etapes[1] if len(etapes) > 1 else "Non sp√©cifi√©"],
                    ["3. R√©union du CTASF", etapes[2] if len(etapes) > 2 else "Non sp√©cifi√©"],
                    ["4. D√©lib√©ration", etapes[3] if len(etapes) > 3 else "Non sp√©cifi√©"]
                ]

                for etape in etapes_data:
                    status = etape[1].lower()
                    if "compl√©t" in status:
                        icon = "‚úÖ"
                    elif "en cours" in status:
                        icon = "üîÑ"
                    else:
                        icon = "‚≠ï"

                    st.write(f"{icon} **{etape[0]}** : {etape[1]}")

            # Ligne de s√©paration entre les communes
            st.markdown("---")

        # Si aucune commune n'est trouv√©e apr√®s filtrage
        if len(df_etapes_filtre) == 0:
            st.warning("Aucune commune ne correspond aux crit√®res de filtrage s√©lectionn√©s.")
